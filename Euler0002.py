######################

### https://projecteuler.net/problem=2

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#########################

# Not hard to show that every third term is even valued. In this case, though, testing for evenness is no less efficient than testing a counter for divisibility by 3.
# Fibonacci sequence should be initialized by 1 and 1, here it makes no difference.

state = [1, 1]

# This function produces a new copy of the state variable and updates it. 
def updateState(state):
    return [state[1],sum(state)]

N=4000000
sum_of_even_terms = 0
while state[1]<N:
    state = updateState(state)
    if state[0]%2==0:
        print(state[0])
        sum_of_even_terms += state[0]

print("sum of even terms in Fibonacci sequence less than "+str(N)+" is " + str(sum_of_even_terms)+".")

# There is a way to do it by creating a state object and calling methods on it.

class Fibonacci_state:
    """A class to create and modify the Fibonacci sequence."""
    def __init__(self):
        self.state=[1,1]
    def updateState(self):
        self.state=[self.state[1],sum(self.state)]    
    #def outputState(self):
    #    return self.state

print("Class method")
stateclass=Fibonacci_state()
sumofterms=0
while stateclass.state[1]<N:
    stateclass.updateState()
    if stateclass.state[0]%2==0:
        print(stateclass.state[0])
        sumofterms+=stateclass.state[0]

print("sum of even terms in Fibonacci sequence less than "+str(N)+" is " + str(sumofterms)+".")
